{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4b51dcad",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-08T16:28:57.410955Z",
     "iopub.status.busy": "2025-09-08T16:28:57.410656Z",
     "iopub.status.idle": "2025-09-08T16:28:59.104840Z",
     "shell.execute_reply": "2025-09-08T16:28:59.103597Z"
    },
    "papermill": {
     "duration": 1.699247,
     "end_time": "2025-09-08T16:28:59.106078",
     "exception": false,
     "start_time": "2025-09-08T16:28:57.406831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/tmdb-movie-metadata/tmdb_5000_movies.csv\n",
      "/kaggle/input/tmdb-movie-metadata/tmdb_5000_credits.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e4b96009",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:28:59.111688Z",
     "iopub.status.busy": "2025-09-08T16:28:59.111025Z",
     "iopub.status.idle": "2025-09-08T16:29:00.900425Z",
     "shell.execute_reply": "2025-09-08T16:29:00.899667Z"
    },
    "papermill": {
     "duration": 1.793403,
     "end_time": "2025-09-08T16:29:00.901892",
     "exception": false,
     "start_time": "2025-09-08T16:28:59.108489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os, ast, json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7844bd8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:29:00.906540Z",
     "iopub.status.busy": "2025-09-08T16:29:00.906202Z",
     "iopub.status.idle": "2025-09-08T16:29:07.806956Z",
     "shell.execute_reply": "2025-09-08T16:29:07.806186Z"
    },
    "papermill": {
     "duration": 6.904358,
     "end_time": "2025-09-08T16:29:07.808219",
     "exception": false,
     "start_time": "2025-09-08T16:29:00.903861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>budget</th>\n",
       "      <th>genres</th>\n",
       "      <th>homepage</th>\n",
       "      <th>id</th>\n",
       "      <th>keywords</th>\n",
       "      <th>original_language</th>\n",
       "      <th>original_title</th>\n",
       "      <th>overview</th>\n",
       "      <th>popularity</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>...</th>\n",
       "      <th>revenue</th>\n",
       "      <th>runtime</th>\n",
       "      <th>spoken_languages</th>\n",
       "      <th>status</th>\n",
       "      <th>tagline</th>\n",
       "      <th>title</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>cast</th>\n",
       "      <th>crew</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>237000000</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>http://www.avatarmovie.com/</td>\n",
       "      <td>19995</td>\n",
       "      <td>[{'id': 1463, 'name': 'culture clash'}, {'id':...</td>\n",
       "      <td>en</td>\n",
       "      <td>Avatar</td>\n",
       "      <td>In the 22nd century, a paraplegic Marine is di...</td>\n",
       "      <td>150.437577</td>\n",
       "      <td>[{\"name\": \"Ingenious Film Partners\", \"id\": 289...</td>\n",
       "      <td>...</td>\n",
       "      <td>2787965087</td>\n",
       "      <td>162.0</td>\n",
       "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...</td>\n",
       "      <td>Released</td>\n",
       "      <td>Enter the World of Pandora.</td>\n",
       "      <td>Avatar</td>\n",
       "      <td>7.2</td>\n",
       "      <td>11800</td>\n",
       "      <td>[{'cast_id': 242, 'character': 'Jake Sully', '...</td>\n",
       "      <td>[{'credit_id': '52fe48009251416c750aca23', 'de...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>300000000</td>\n",
       "      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n",
       "      <td>http://disney.go.com/disneypictures/pirates/</td>\n",
       "      <td>285</td>\n",
       "      <td>[{'id': 270, 'name': 'ocean'}, {'id': 726, 'na...</td>\n",
       "      <td>en</td>\n",
       "      <td>Pirates of the Caribbean: At World's End</td>\n",
       "      <td>Captain Barbossa, long believed to be dead, ha...</td>\n",
       "      <td>139.082615</td>\n",
       "      <td>[{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...</td>\n",
       "      <td>...</td>\n",
       "      <td>961000000</td>\n",
       "      <td>169.0</td>\n",
       "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}]</td>\n",
       "      <td>Released</td>\n",
       "      <td>At the end of the world, the adventure begins.</td>\n",
       "      <td>Pirates of the Caribbean: At World's End</td>\n",
       "      <td>6.9</td>\n",
       "      <td>4500</td>\n",
       "      <td>[{'cast_id': 4, 'character': 'Captain Jack Spa...</td>\n",
       "      <td>[{'credit_id': '52fe4232c3a36847f800b579', 'de...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>245000000</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>http://www.sonypictures.com/movies/spectre/</td>\n",
       "      <td>206647</td>\n",
       "      <td>[{'id': 470, 'name': 'spy'}, {'id': 818, 'name...</td>\n",
       "      <td>en</td>\n",
       "      <td>Spectre</td>\n",
       "      <td>A cryptic message from Bondâ€™s past sends him o...</td>\n",
       "      <td>107.376788</td>\n",
       "      <td>[{\"name\": \"Columbia Pictures\", \"id\": 5}, {\"nam...</td>\n",
       "      <td>...</td>\n",
       "      <td>880674609</td>\n",
       "      <td>148.0</td>\n",
       "      <td>[{\"iso_639_1\": \"fr\", \"name\": \"Fran\\u00e7ais\"},...</td>\n",
       "      <td>Released</td>\n",
       "      <td>A Plan No One Escapes</td>\n",
       "      <td>Spectre</td>\n",
       "      <td>6.3</td>\n",
       "      <td>4466</td>\n",
       "      <td>[{'cast_id': 1, 'character': 'James Bond', 'cr...</td>\n",
       "      <td>[{'credit_id': '54805967c3a36829b5002c41', 'de...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>250000000</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 80, 'nam...</td>\n",
       "      <td>http://www.thedarkknightrises.com/</td>\n",
       "      <td>49026</td>\n",
       "      <td>[{'id': 849, 'name': 'dc comics'}, {'id': 853,...</td>\n",
       "      <td>en</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>Following the death of District Attorney Harve...</td>\n",
       "      <td>112.312950</td>\n",
       "      <td>[{\"name\": \"Legendary Pictures\", \"id\": 923}, {\"...</td>\n",
       "      <td>...</td>\n",
       "      <td>1084939099</td>\n",
       "      <td>165.0</td>\n",
       "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}]</td>\n",
       "      <td>Released</td>\n",
       "      <td>The Legend Ends</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>7.6</td>\n",
       "      <td>9106</td>\n",
       "      <td>[{'cast_id': 2, 'character': 'Bruce Wayne / Ba...</td>\n",
       "      <td>[{'credit_id': '52fe4781c3a36847f81398c3', 'de...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>260000000</td>\n",
       "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
       "      <td>http://movies.disney.com/john-carter</td>\n",
       "      <td>49529</td>\n",
       "      <td>[{'id': 818, 'name': 'based on novel'}, {'id':...</td>\n",
       "      <td>en</td>\n",
       "      <td>John Carter</td>\n",
       "      <td>John Carter is a war-weary, former military ca...</td>\n",
       "      <td>43.926995</td>\n",
       "      <td>[{\"name\": \"Walt Disney Pictures\", \"id\": 2}]</td>\n",
       "      <td>...</td>\n",
       "      <td>284139100</td>\n",
       "      <td>132.0</td>\n",
       "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}]</td>\n",
       "      <td>Released</td>\n",
       "      <td>Lost in our world, found in another.</td>\n",
       "      <td>John Carter</td>\n",
       "      <td>6.1</td>\n",
       "      <td>2124</td>\n",
       "      <td>[{'cast_id': 5, 'character': 'John Carter', 'c...</td>\n",
       "      <td>[{'credit_id': '52fe479ac3a36847f813eaa3', 'de...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      budget                                             genres  \\\n",
       "0  237000000  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "1  300000000  [{'id': 12, 'name': 'Adventure'}, {'id': 14, '...   \n",
       "2  245000000  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "3  250000000  [{'id': 28, 'name': 'Action'}, {'id': 80, 'nam...   \n",
       "4  260000000  [{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...   \n",
       "\n",
       "                                       homepage      id  \\\n",
       "0                   http://www.avatarmovie.com/   19995   \n",
       "1  http://disney.go.com/disneypictures/pirates/     285   \n",
       "2   http://www.sonypictures.com/movies/spectre/  206647   \n",
       "3            http://www.thedarkknightrises.com/   49026   \n",
       "4          http://movies.disney.com/john-carter   49529   \n",
       "\n",
       "                                            keywords original_language  \\\n",
       "0  [{'id': 1463, 'name': 'culture clash'}, {'id':...                en   \n",
       "1  [{'id': 270, 'name': 'ocean'}, {'id': 726, 'na...                en   \n",
       "2  [{'id': 470, 'name': 'spy'}, {'id': 818, 'name...                en   \n",
       "3  [{'id': 849, 'name': 'dc comics'}, {'id': 853,...                en   \n",
       "4  [{'id': 818, 'name': 'based on novel'}, {'id':...                en   \n",
       "\n",
       "                             original_title  \\\n",
       "0                                    Avatar   \n",
       "1  Pirates of the Caribbean: At World's End   \n",
       "2                                   Spectre   \n",
       "3                     The Dark Knight Rises   \n",
       "4                               John Carter   \n",
       "\n",
       "                                            overview  popularity  \\\n",
       "0  In the 22nd century, a paraplegic Marine is di...  150.437577   \n",
       "1  Captain Barbossa, long believed to be dead, ha...  139.082615   \n",
       "2  A cryptic message from Bondâ€™s past sends him o...  107.376788   \n",
       "3  Following the death of District Attorney Harve...  112.312950   \n",
       "4  John Carter is a war-weary, former military ca...   43.926995   \n",
       "\n",
       "                                production_companies  ...     revenue runtime  \\\n",
       "0  [{\"name\": \"Ingenious Film Partners\", \"id\": 289...  ...  2787965087   162.0   \n",
       "1  [{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...  ...   961000000   169.0   \n",
       "2  [{\"name\": \"Columbia Pictures\", \"id\": 5}, {\"nam...  ...   880674609   148.0   \n",
       "3  [{\"name\": \"Legendary Pictures\", \"id\": 923}, {\"...  ...  1084939099   165.0   \n",
       "4        [{\"name\": \"Walt Disney Pictures\", \"id\": 2}]  ...   284139100   132.0   \n",
       "\n",
       "                                    spoken_languages    status  \\\n",
       "0  [{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...  Released   \n",
       "1           [{\"iso_639_1\": \"en\", \"name\": \"English\"}]  Released   \n",
       "2  [{\"iso_639_1\": \"fr\", \"name\": \"Fran\\u00e7ais\"},...  Released   \n",
       "3           [{\"iso_639_1\": \"en\", \"name\": \"English\"}]  Released   \n",
       "4           [{\"iso_639_1\": \"en\", \"name\": \"English\"}]  Released   \n",
       "\n",
       "                                          tagline  \\\n",
       "0                     Enter the World of Pandora.   \n",
       "1  At the end of the world, the adventure begins.   \n",
       "2                           A Plan No One Escapes   \n",
       "3                                 The Legend Ends   \n",
       "4            Lost in our world, found in another.   \n",
       "\n",
       "                                      title vote_average vote_count  \\\n",
       "0                                    Avatar          7.2      11800   \n",
       "1  Pirates of the Caribbean: At World's End          6.9       4500   \n",
       "2                                   Spectre          6.3       4466   \n",
       "3                     The Dark Knight Rises          7.6       9106   \n",
       "4                               John Carter          6.1       2124   \n",
       "\n",
       "                                                cast  \\\n",
       "0  [{'cast_id': 242, 'character': 'Jake Sully', '...   \n",
       "1  [{'cast_id': 4, 'character': 'Captain Jack Spa...   \n",
       "2  [{'cast_id': 1, 'character': 'James Bond', 'cr...   \n",
       "3  [{'cast_id': 2, 'character': 'Bruce Wayne / Ba...   \n",
       "4  [{'cast_id': 5, 'character': 'John Carter', 'c...   \n",
       "\n",
       "                                                crew  \n",
       "0  [{'credit_id': '52fe48009251416c750aca23', 'de...  \n",
       "1  [{'credit_id': '52fe4232c3a36847f800b579', 'de...  \n",
       "2  [{'credit_id': '54805967c3a36829b5002c41', 'de...  \n",
       "3  [{'credit_id': '52fe4781c3a36847f81398c3', 'de...  \n",
       "4  [{'credit_id': '52fe479ac3a36847f813eaa3', 'de...  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DATA_DIR = \"data\"\n",
    "MOVIES_CSV = os.path.join(DATA_DIR, \"/kaggle/input/tmdb-movie-metadata/tmdb_5000_movies.csv\")\n",
    "CREDITS_CSV = os.path.join(DATA_DIR, \"/kaggle/input/tmdb-movie-metadata/tmdb_5000_credits.csv\")\n",
    "\n",
    "def safe_parse(x):\n",
    "    if pd.isna(x): return []\n",
    "    if isinstance(x, (list, dict)): return x\n",
    "    try: return ast.literal_eval(x)\n",
    "    except: \n",
    "        try: return json.loads(x)\n",
    "        except: return []\n",
    "\n",
    "def load_data():\n",
    "    if not (os.path.exists(MOVIES_CSV) and os.path.exists(CREDITS_CSV)):\n",
    "        raise FileNotFoundError(\"Put tmdb_5000_movies.csv and tmdb_5000_credits.csv into ./data/\")\n",
    "    movies = pd.read_csv(MOVIES_CSV)\n",
    "    credits = pd.read_csv(CREDITS_CSV).rename(columns={'movie_id':'id'})\n",
    "    df = movies.merge(credits[['id','cast','crew']], on='id', how='left')\n",
    "    for col in ['genres','keywords','cast','crew']:\n",
    "        df[col] = df[col].apply(safe_parse)\n",
    "    if 'overview' not in df.columns: df['overview'] = ''\n",
    "    return df.reset_index(drop=True)\n",
    "\n",
    "df = load_data()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a3258fb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:29:07.813873Z",
     "iopub.status.busy": "2025-09-08T16:29:07.813491Z",
     "iopub.status.idle": "2025-09-08T16:29:08.145000Z",
     "shell.execute_reply": "2025-09-08T16:29:08.143940Z"
    },
    "papermill": {
     "duration": 0.335983,
     "end_time": "2025-09-08T16:29:08.146500",
     "exception": false,
     "start_time": "2025-09-08T16:29:07.810517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>soup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Avatar</td>\n",
       "      <td>action adventure fantasy sciencefiction action...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pirates of the Caribbean: At World's End</td>\n",
       "      <td>adventure fantasy action adventure fantasy act...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Spectre</td>\n",
       "      <td>action adventure crime action adventure crime ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>action crime drama thriller action crime drama...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>John Carter</td>\n",
       "      <td>action adventure sciencefiction action adventu...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      title  \\\n",
       "0                                    Avatar   \n",
       "1  Pirates of the Caribbean: At World's End   \n",
       "2                                   Spectre   \n",
       "3                     The Dark Knight Rises   \n",
       "4                               John Carter   \n",
       "\n",
       "                                                soup  \n",
       "0  action adventure fantasy sciencefiction action...  \n",
       "1  adventure fantasy action adventure fantasy act...  \n",
       "2  action adventure crime action adventure crime ...  \n",
       "3  action crime drama thriller action crime drama...  \n",
       "4  action adventure sciencefiction action adventu...  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def names_from_list(ld, key='name', top_n=None):\n",
    "    if not isinstance(ld, list): return []\n",
    "    out = []\n",
    "    for item in ld:\n",
    "        if isinstance(item, dict):\n",
    "            val = item.get(key) or item.get('title') or item.get('name')\n",
    "            if val: out.append(str(val).replace(' ','').lower())\n",
    "        elif isinstance(item, str):\n",
    "            out.append(item.replace(' ','').lower())\n",
    "    return out[:top_n] if top_n else out\n",
    "\n",
    "def director_from_crew(crew):\n",
    "    if not isinstance(crew, list): return ''\n",
    "    for p in crew:\n",
    "        if isinstance(p, dict) and (p.get('job') or '').lower() == 'director':\n",
    "            return str(p.get('name','')).replace(' ','').lower()\n",
    "    return ''\n",
    "\n",
    "def build_soup(df, cast_top_n=3, weights=None):\n",
    "    if weights is None:\n",
    "        weights = {'genres':3,'keywords':2,'cast':2,'director':2,'overview':1}\n",
    "    soups = []\n",
    "    for _, r in df.iterrows():\n",
    "        g = names_from_list(r.get('genres', []))\n",
    "        k = names_from_list(r.get('keywords', []))\n",
    "        c = names_from_list(r.get('cast', []), top_n=cast_top_n)\n",
    "        d = director_from_crew(r.get('crew', []))\n",
    "        overview = str(r.get('overview','') or '').lower()\n",
    "        parts = []\n",
    "        parts += g * weights.get('genres',1)\n",
    "        parts += k * weights.get('keywords',1)\n",
    "        parts += c * weights.get('cast',1)\n",
    "        if d: parts += [d] * weights.get('director',1)\n",
    "        parts.append(overview)\n",
    "        soups.append(\" \".join(parts))\n",
    "    return soups\n",
    "\n",
    "df['soup'] = build_soup(df)\n",
    "df[['title','soup']].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d90be411",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:29:08.151990Z",
     "iopub.status.busy": "2025-09-08T16:29:08.151753Z",
     "iopub.status.idle": "2025-09-08T16:29:09.073943Z",
     "shell.execute_reply": "2025-09-08T16:29:09.073284Z"
    },
    "papermill": {
     "duration": 0.926701,
     "end_time": "2025-09-08T16:29:09.075772",
     "exception": false,
     "start_time": "2025-09-08T16:29:08.149071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tfidf = TfidfVectorizer(stop_words='english', max_features=5000)\n",
    "tfidf_matrix = tfidf.fit_transform(df['soup'].fillna(''))\n",
    "cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n",
    "title_to_index = pd.Series(df.index, index=df['title']).to_dict()\n",
    "lower_to_index = {t.lower(): i for t,i in title_to_index.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "30ee5e8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:29:09.081430Z",
     "iopub.status.busy": "2025-09-08T16:29:09.081131Z",
     "iopub.status.idle": "2025-09-08T16:29:09.087342Z",
     "shell.execute_reply": "2025-09-08T16:29:09.086432Z"
    },
    "papermill": {
     "duration": 0.010652,
     "end_time": "2025-09-08T16:29:09.088953",
     "exception": false,
     "start_time": "2025-09-08T16:29:09.078301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def recommend(title, n=5):\n",
    "    if title not in title_to_index and title.lower() not in lower_to_index:\n",
    "        candidates = [t for t in title_to_index.keys() if title.lower() in t.lower()]\n",
    "        if candidates:\n",
    "            return pd.DataFrame({\"suggestions\": candidates[:10]})\n",
    "        return pd.DataFrame({\"error\":[f\"Title '{title}' not found\"]})\n",
    "    idx = title_to_index.get(title, lower_to_index.get(title.lower()))\n",
    "    scores = list(enumerate(cosine_sim[idx]))\n",
    "    scores = sorted(scores, key=lambda x: x[1], reverse=True)\n",
    "    scores = [s for s in scores if s[0] != idx][:n]\n",
    "    indices = [i for i,_ in scores]\n",
    "    out = df.iloc[indices][['id','title','overview']].copy().reset_index(drop=True)\n",
    "    out['score'] = [float(f\"{s:.4f}\") for _,s in scores]\n",
    "    return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b790b4b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:29:09.094453Z",
     "iopub.status.busy": "2025-09-08T16:29:09.094185Z",
     "iopub.status.idle": "2025-09-08T16:29:09.114824Z",
     "shell.execute_reply": "2025-09-08T16:29:09.113618Z"
    },
    "papermill": {
     "duration": 0.0246,
     "end_time": "2025-09-08T16:29:09.116029",
     "exception": false,
     "start_time": "2025-09-08T16:29:09.091429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Some movie titles: ['Avatar', \"Pirates of the Caribbean: At World's End\", 'Spectre', 'The Dark Knight Rises', 'John Carter', 'Spider-Man 3', 'Tangled', 'Avengers: Age of Ultron', 'Harry Potter and the Half-Blood Prince', 'Batman v Superman: Dawn of Justice']\n",
      "\n",
      "Query: Avatar\n",
      "       id                    title  \\\n",
      "0     679                   Aliens   \n",
      "1   54138  Star Trek Into Darkness   \n",
      "2    8069               Barbarella   \n",
      "3   34851                Predators   \n",
      "4  270938            Falcon Rising   \n",
      "\n",
      "                                            overview   score  \n",
      "0  When Ripley's lifepod is found by a salvage cr...  0.2842  \n",
      "1  When the crew of the Enterprise is called back...  0.2588  \n",
      "2  In the far future, a highly sexual woman is ta...  0.2066  \n",
      "3  A mercenary reluctantly leads a motley crew of...  0.2046  \n",
      "4  Chapman is an ex-marine in Brazil's slums, bat...  0.2042  \n",
      "\n",
      "Query: Spectre\n",
      "       id                  title  \\\n",
      "0   37724                Skyfall   \n",
      "1   10764      Quantum of Solace   \n",
      "2   36670  Never Say Never Again   \n",
      "3  153397               Restless   \n",
      "4   36557          Casino Royale   \n",
      "\n",
      "                                            overview   score  \n",
      "0  When Bond's latest assignment goes gravely wro...  0.4418  \n",
      "1  Quantum of Solace continues the adventures of ...  0.4220  \n",
      "2  James Bond returns as the secret agent 007 one...  0.2822  \n",
      "3  A young woman finds out that her mother worked...  0.2415  \n",
      "4  Le Chiffre, a banker to the world's terrorists...  0.2316  \n",
      "\n",
      "Query: Pirates of the Caribbean: At World's End\n",
      "      id                                              title  \\\n",
      "0     58         Pirates of the Caribbean: Dead Man's Chest   \n",
      "1     22  Pirates of the Caribbean: The Curse of the Bla...   \n",
      "2   1865        Pirates of the Caribbean: On Stranger Tides   \n",
      "3  87827                                         Life of Pi   \n",
      "4  10488                                       Nim's Island   \n",
      "\n",
      "                                            overview   score  \n",
      "0  Captain Jack Sparrow works his way out of a bl...  0.5220  \n",
      "1  Jack Sparrow, a freewheeling 17th-century pira...  0.3359  \n",
      "2  Captain Jack Sparrow crosses paths with a woma...  0.2346  \n",
      "3  The story of an Indian boy named Pi, a zookeep...  0.2238  \n",
      "4  A young girl inhabits an isolated island with ...  0.2152  \n"
     ]
    }
   ],
   "source": [
    "print(\"Some movie titles:\", df['title'].head(10).tolist())\n",
    "\n",
    "queries = [\"Avatar\", \"Spectre\", \"Pirates of the Caribbean: At World's End\"]\n",
    "for q in queries:\n",
    "    print(\"\\nQuery:\", q)\n",
    "    print(recommend(q, n=5))\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 138,
     "sourceId": 4508,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17.51052,
   "end_time": "2025-09-08T16:29:09.938254",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-08T16:28:52.427734",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
