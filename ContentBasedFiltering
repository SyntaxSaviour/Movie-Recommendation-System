{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "11c56c87",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-08T16:43:31.207377Z",
     "iopub.status.busy": "2025-09-08T16:43:31.207021Z",
     "iopub.status.idle": "2025-09-08T16:43:33.113749Z",
     "shell.execute_reply": "2025-09-08T16:43:33.112848Z"
    },
    "papermill": {
     "duration": 1.912847,
     "end_time": "2025-09-08T16:43:33.115236",
     "exception": false,
     "start_time": "2025-09-08T16:43:31.202389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/tmdb-movie-metadata/tmdb_5000_movies.csv\n",
      "/kaggle/input/tmdb-movie-metadata/tmdb_5000_credits.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0353b3ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:43:33.121352Z",
     "iopub.status.busy": "2025-09-08T16:43:33.120936Z",
     "iopub.status.idle": "2025-09-08T16:43:34.619155Z",
     "shell.execute_reply": "2025-09-08T16:43:34.618236Z"
    },
    "papermill": {
     "duration": 1.502913,
     "end_time": "2025-09-08T16:43:34.620879",
     "exception": false,
     "start_time": "2025-09-08T16:43:33.117966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os, ast, json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cf66c850",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:43:34.627171Z",
     "iopub.status.busy": "2025-09-08T16:43:34.626126Z",
     "iopub.status.idle": "2025-09-08T16:43:43.746508Z",
     "shell.execute_reply": "2025-09-08T16:43:43.745644Z"
    },
    "papermill": {
     "duration": 9.124778,
     "end_time": "2025-09-08T16:43:43.747953",
     "exception": false,
     "start_time": "2025-09-08T16:43:34.623175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4803, 22)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DATA_DIR = \"data\"\n",
    "MOVIES_CSV = os.path.join(DATA_DIR, \"/kaggle/input/tmdb-movie-metadata/tmdb_5000_movies.csv\")\n",
    "CREDITS_CSV = os.path.join(DATA_DIR, \"/kaggle/input/tmdb-movie-metadata/tmdb_5000_credits.csv\")\n",
    "\n",
    "def safe_parse(x):\n",
    "    if pd.isna(x): return []\n",
    "    if isinstance(x, (list, dict)): return x\n",
    "    try: return ast.literal_eval(x)\n",
    "    except:\n",
    "        try: return json.loads(x)\n",
    "        except: return []\n",
    "\n",
    "movies = pd.read_csv(MOVIES_CSV)\n",
    "credits = pd.read_csv(CREDITS_CSV).rename(columns={'movie_id':'id'})\n",
    "df = movies.merge(credits[['id','cast','crew']], on='id', how='left')\n",
    "for c in ['genres','keywords','cast','crew']:\n",
    "    if c in df.columns:\n",
    "        df[c] = df[c].apply(safe_parse)\n",
    "if 'overview' not in df.columns:\n",
    "    df['overview'] = ''\n",
    "df = df.reset_index(drop=True)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "03791c86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:43:43.754072Z",
     "iopub.status.busy": "2025-09-08T16:43:43.753757Z",
     "iopub.status.idle": "2025-09-08T16:43:43.949796Z",
     "shell.execute_reply": "2025-09-08T16:43:43.948850Z"
    },
    "papermill": {
     "duration": 0.201255,
     "end_time": "2025-09-08T16:43:43.951712",
     "exception": false,
     "start_time": "2025-09-08T16:43:43.750457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def names_from_list(ld, key='name', top_n=None):\n",
    "    if not isinstance(ld, list): return []\n",
    "    out = []\n",
    "    for item in ld:\n",
    "        if isinstance(item, dict):\n",
    "            val = item.get(key) or item.get('title') or item.get('name')\n",
    "            if val: out.append(str(val).replace(' ','').lower())\n",
    "        elif isinstance(item, str):\n",
    "            out.append(item.replace(' ','').lower())\n",
    "    return out[:top_n] if top_n else out\n",
    "\n",
    "def director_from_crew(crew):\n",
    "    if not isinstance(crew, list): return ''\n",
    "    for p in crew:\n",
    "        if isinstance(p, dict) and (p.get('job') or '').lower() == 'director':\n",
    "            return str(p.get('name','')).replace(' ','').lower()\n",
    "    return ''\n",
    "\n",
    "def build_soup_row(r, cast_top_n=3, weights=None):\n",
    "    if weights is None:\n",
    "        weights = {'genres':3,'keywords':2,'cast':2,'director':2,'overview':1}\n",
    "    g = names_from_list(r.get('genres', []))\n",
    "    k = names_from_list(r.get('keywords', []))\n",
    "    c = names_from_list(r.get('cast', []), top_n=cast_top_n)\n",
    "    d = director_from_crew(r.get('crew', []))\n",
    "    overview = str(r.get('overview','') or '').lower()\n",
    "    parts = []\n",
    "    parts += g * weights.get('genres',1)\n",
    "    parts += k * weights.get('keywords',1)\n",
    "    parts += c * weights.get('cast',1)\n",
    "    if d: parts += [d] * weights.get('director',1)\n",
    "    parts.append(overview)\n",
    "    return \" \".join(parts)\n",
    "\n",
    "df['soup'] = df.apply(lambda r: build_soup_row(r, cast_top_n=3), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "29587174",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:43:43.957848Z",
     "iopub.status.busy": "2025-09-08T16:43:43.957534Z",
     "iopub.status.idle": "2025-09-08T16:43:45.119654Z",
     "shell.execute_reply": "2025-09-08T16:43:45.118843Z"
    },
    "papermill": {
     "duration": 1.167245,
     "end_time": "2025-09-08T16:43:45.121537",
     "exception": false,
     "start_time": "2025-09-08T16:43:43.954292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tfidf = TfidfVectorizer(stop_words='english', max_features=5000)\n",
    "tfidf_matrix = tfidf.fit_transform(df['soup'].fillna(''))\n",
    "cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n",
    "title_to_index = pd.Series(df.index, index=df['title']).to_dict()\n",
    "lower_to_index = {t.lower(): i for t,i in title_to_index.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "040b2e65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:43:45.127896Z",
     "iopub.status.busy": "2025-09-08T16:43:45.127582Z",
     "iopub.status.idle": "2025-09-08T16:43:45.136500Z",
     "shell.execute_reply": "2025-09-08T16:43:45.135727Z"
    },
    "papermill": {
     "duration": 0.013466,
     "end_time": "2025-09-08T16:43:45.137857",
     "exception": false,
     "start_time": "2025-09-08T16:43:45.124391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def recommend(title, n=5):\n",
    "    if title not in title_to_index and title.lower() not in lower_to_index:\n",
    "        candidates = [t for t in title_to_index.keys() if title.lower() in t.lower()]\n",
    "        if candidates:\n",
    "            return pd.DataFrame({\"suggestions\": candidates[:10]})\n",
    "        return pd.DataFrame({\"error\":[f\"Title '{title}' not found\"]})\n",
    "    idx = title_to_index.get(title, lower_to_index.get(title.lower()))\n",
    "    scores = list(enumerate(cosine_sim[idx]))\n",
    "    scores = sorted(scores, key=lambda x: x[1], reverse=True)\n",
    "    scores = [s for s in scores if s[0] != idx][:n]\n",
    "    indices = [i for i,_ in scores]\n",
    "    out = df.iloc[indices][['id','title','overview','genres']].copy().reset_index(drop=True)\n",
    "    out['overview'] = out['overview'].astype(str).str.slice(0,180).str.replace('\\n',' ') + '...'\n",
    "    def genres_to_str(g):\n",
    "        if isinstance(g, list):\n",
    "            names = []\n",
    "            for item in g:\n",
    "                if isinstance(item, dict):\n",
    "                    names.append(item.get('name',''))\n",
    "                else:\n",
    "                    names.append(str(item))\n",
    "            return \", \".join([x for x in names if x])[:120]\n",
    "        return str(g)[:120]\n",
    "    out['genres'] = out['genres'].apply(genres_to_str)\n",
    "    out['score'] = [float(f\"{s:.4f}\") for _,s in scores]\n",
    "    return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b4c3bd6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-08T16:43:45.143359Z",
     "iopub.status.busy": "2025-09-08T16:43:45.143071Z",
     "iopub.status.idle": "2025-09-08T16:43:45.176148Z",
     "shell.execute_reply": "2025-09-08T16:43:45.174866Z"
    },
    "papermill": {
     "duration": 0.037648,
     "end_time": "2025-09-08T16:43:45.177842",
     "exception": false,
     "start_time": "2025-09-08T16:43:45.140194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Some movie titles: ['Avatar', \"Pirates of the Caribbean: At World's End\", 'Spectre', 'The Dark Knight Rises', 'John Carter', 'Spider-Man 3', 'Tangled', 'Avengers: Age of Ultron', 'Harry Potter and the Half-Blood Prince', 'Batman v Superman: Dawn of Justice']\n",
      "\n",
      "Query: Avatar\n",
      "    id                   title                                                                                                                                                                                overview                                       genres  score\n",
      "   679                  Aliens When Ripley's lifepod is found by a salvage crew over 50 years later, she finds that terra-formers are on the very planet they found the alien species. When the company sends a fam...    Horror, Action, Thriller, Science Fiction 0.2842\n",
      " 54138 Star Trek Into Darkness When the crew of the Enterprise is called back home, they find an unstoppable force of terror from within their own organization has detonated the fleet and everything it stands fo...           Action, Adventure, Science Fiction 0.2588\n",
      "  8069              Barbarella                            In the far future, a highly sexual woman is tasked with finding and stopping the evil Durand-Durand. Along the way she encounters various unusual people....                              Science Fiction 0.2066\n",
      " 34851               Predators A mercenary reluctantly leads a motley crew of warriors who soon come to realize they've been captured and deposited on an alien planet by an unknown nemesis. With the exception of... Action, Science Fiction, Adventure, Thriller 0.2046\n",
      "270938           Falcon Rising                                                                 Chapman is an ex-marine in Brazil's slums, battling the yakuza outfit who attacked his sister and left her for dead....                            Adventure, Action 0.2042\n",
      "\n",
      "Query: Spectre\n",
      "    id                 title                                                                                                                                                                                overview                             genres  score\n",
      " 37724               Skyfall When Bond's latest assignment goes gravely wrong and agents around the world are exposed, MI6 is attacked forcing M to relocate the agency. These events cause her authority and pos...        Action, Adventure, Thriller 0.4418\n",
      " 10764     Quantum of Solace Quantum of Solace continues the adventures of James Bond after Casino Royale. Betrayed by Vesper, the woman he loved, 007 fights the urge to make his latest mission personal. Pursu... Adventure, Action, Thriller, Crime 0.4220\n",
      " 36670 Never Say Never Again James Bond returns as the secret agent 007 one more time to battle the evil organization SPECTRE. Bond must defeat Largo, who has stolen two atomic warheads for nuclear blackmail. ...        Adventure, Action, Thriller 0.2822\n",
      "153397              Restless                                       A young woman finds out that her mother worked as a spy for the British Secret Service during World War II and has been on the run ever since....           TV Movie, Romance, Drama 0.2415\n",
      " 36557         Casino Royale Le Chiffre, a banker to the world's terrorists, is scheduled to participate in a high-stakes poker game in Montenegro, where he intends to use his winnings to establish his financi...        Adventure, Action, Thriller 0.2316\n",
      "\n",
      "Query: Pirates of the Caribbean: At World's End\n",
      "   id                                                  title                                                                                                                                                                                overview                             genres  score\n",
      "   58             Pirates of the Caribbean: Dead Man's Chest                                                    Captain Jack Sparrow works his way out of a blood debt with the ghostly Davey Jones, he also attempts to avoid eternal damnation....         Adventure, Fantasy, Action 0.5220\n",
      "   22 Pirates of the Caribbean: The Curse of the Black Pearl Jack Sparrow, a freewheeling 17th-century pirate who roams the Caribbean Sea, butts heads with a rival pirate bent on pillaging the village of Port Royal. When the governor's daugh...         Adventure, Fantasy, Action 0.3359\n",
      " 1865            Pirates of the Caribbean: On Stranger Tides Captain Jack Sparrow crosses paths with a woman from his past, and he's not sure if it's love -- or if she's a ruthless con artist who's using him to find the fabled Fountain of Yo...         Adventure, Action, Fantasy 0.2346\n",
      "87827                                             Life of Pi The story of an Indian boy named Pi, a zookeeper's son who finds himself in the company of a hyena, zebra, orangutan, and a Bengal tiger after a shipwreck sets them adrift in the P...           Adventure, Drama, Action 0.2238\n",
      "10488                                           Nim's Island                                              A young girl inhabits an isolated island with her scientist father and communicates with a reclusive author of the novel she's reading.... Adventure, Comedy, Family, Fantasy 0.2152\n"
     ]
    }
   ],
   "source": [
    "print(\"Some movie titles:\", df['title'].head(10).tolist())\n",
    "\n",
    "queries = [\"Avatar\", \"Spectre\", \"Pirates of the Caribbean: At World's End\"]\n",
    "for q in queries:\n",
    "    print(\"\\nQuery:\", q)\n",
    "    print(recommend(q, n=5).to_string(index=False))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 138,
     "sourceId": 4508,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 19.951055,
   "end_time": "2025-09-08T16:43:45.999826",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-08T16:43:26.048771",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
